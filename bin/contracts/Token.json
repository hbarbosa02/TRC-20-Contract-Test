{
    "contractName": "Token",
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. Note they can later distribute these tokens as they wish using `transfer` and other `ERC20` functions.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Constructor that gives msg.sender all of existing tokens.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"title\":\"SimpleToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/Token.sol\":\"Token\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/ERC20.sol\":{\"keccak256\":\"0x94806211b0d90dbbc5e2cb78e504c955e83563963a05c10a44a641d4a0098e7a\",\"urls\":[\"bzz-raw://933ccd8e97064be45a18095f8a3f9281deddd8ae15e21e34a528ace46ecd7390\",\"dweb:/ipfs/QmTK2vHd3XdyY4WWVGKFLJ1QpxWFBJhCUxS5CeHV5G1gdJ\"]},\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/ERC20Detailed.sol\":{\"keccak256\":\"0xa53e4e02a73bcdbc49fffd77ea7b63b0e554d7995d81bede51e5971c19d05ac4\",\"urls\":[\"bzz-raw://360f5b56b6dca14ec5540f1fac6fcd279ed8ebfe43fbdad99e3293e9eddbdbf7\",\"dweb:/ipfs/Qmdj7WqYdDTWZ9wWBf4waVHXGrA4LaEWDs6x5jccq5yqVr\"]},\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/IERC20.sol\":{\"keccak256\":\"0xcd7861d9390ea4b59d19c09127b9e1c1b8c20281f82b6f24c6d5f92eb096b821\",\"urls\":[\"bzz-raw://37d72c722ec32b03f0c66f76d94d28eee184e438a6a07a0132107b769c71d1de\",\"dweb:/ipfs/QmYTSKZ3uqAeNwDAR7UcVB3uH76MbbpFov6gs4PBwSMUSq\"]},\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/SafeMath.sol\":{\"keccak256\":\"0x08d04e9c727db6ef70d05f07c086e17a14df81deadde8e2a76098baf8019934c\",\"urls\":[\"bzz-raw://38207f4c0d531a15616ad1eaa3b717a8de39bf127f1b87da811485a50b3c0209\",\"dweb:/ipfs/QmQKvxTfmhdx1ENouiA6MhBm84HdUwPVxX4s3KgpmytsuS\"]},\"c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/Token.sol\":{\"keccak256\":\"0xb5e2c2ccc48bff31ff41a89b4a1427048be1e678803b3721300fded102bd6fbb\",\"urls\":[\"bzz-raw://9c2ea8234160fea34263d475bcf3bdfc49e530e560ab85a65850ba36af6eb3bf\",\"dweb:/ipfs/QmZ8qVw9GAfdtJVnLh3QVs1G4duXPdmwmeyoyN5ZsHsmnk\"]}},\"version\":1}",
    "bytecode": "608060405234801561001057600080fd5b506040518060400160405280600d81526020016c596f7572546f6b656e4e616d6560981b815250604051806040016040528060038152602001622caa2760e91b8152506012826003908051906020019061006b929190610224565b50815161007f906004906020850190610224565b506005805460ff191660ff92909216919091179055506100bb9050336100a36100c0565b60ff16600a0a6402540be400026100c960201b60201c565b6102c5565b60055460ff1690565b6001600160a01b038216610124576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61013d816002546101c360201b6104e51790919060201c565b6002556001600160a01b0382166000908152602081815260409091205461016d9183906104e56101c3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60008282018381101561021d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261025a57600085556102a0565b82601f1061027357805160ff19168380011785556102a0565b828001600101855582156102a0579182015b828111156102a0578251825591602001919060010190610285565b506102ac9291506102b0565b5090565b5b808211156102ac57600081556001016102b1565b610889806102d46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b610173610365565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b0381358116916020810135909116906040013561036b565b6101c36103bc565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b0381351690602001356103c5565b6101736004803603602081101561021b57600080fd5b50356001600160a01b03166103fb565b6100b6610416565b6101576004803603604081101561024957600080fd5b506001600160a01b038135169060200135610477565b6101576004803603604081101561027557600080fd5b506001600160a01b0381351690602001356104ad565b610173600480360360408110156102a157600080fd5b506001600160a01b03813581169160200135166104ba565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061035c338484610546565b50600192915050565b60025490565b6000610378848484610632565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546103b29186916103ad9086610768565b610546565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103ad90866104e5565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103ad9086610768565b600061035c338484610632565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008282018381101561053f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b03831661058b5760405162461bcd60e51b81526004018080602001828103825260248152602001806108306024913960400191505060405180910390fd5b6001600160a01b0382166105d05760405162461bcd60e51b81526004018080602001828103825260228152602001806107e96022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260040180806020018281038252602581526020018061080b6025913960400191505060405180910390fd5b6001600160a01b0382166106bc5760405162461bcd60e51b81526004018080602001828103825260238152602001806107c66023913960400191505060405180910390fd5b6001600160a01b0383166000908152602081905260409020546106df9082610768565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461070e90826104e5565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156107bf576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a26469706673582212203d43c0001aa53fc1dcaf727855fac87a320625c8cd047f6c523c4f937f7a207964736f6c63430007040033",
    "deployedBytecode": "608060405234801561001057600080fd5b50600436106100a95760003560e01c8063395093511161007157806339509351146101d957806370a082311461020557806395d89b411461022b578063a457c2d714610233578063a9059cbb1461025f578063dd62ed3e1461028b576100a9565b806306fdde03146100ae578063095ea7b31461012b57806318160ddd1461016b57806323b872dd14610185578063313ce567146101bb575b600080fd5b6100b66102b9565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100f05781810151838201526020016100d8565b50505050905090810190601f16801561011d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101576004803603604081101561014157600080fd5b506001600160a01b03813516906020013561034f565b604080519115158252519081900360200190f35b610173610365565b60408051918252519081900360200190f35b6101576004803603606081101561019b57600080fd5b506001600160a01b0381358116916020810135909116906040013561036b565b6101c36103bc565b6040805160ff9092168252519081900360200190f35b610157600480360360408110156101ef57600080fd5b506001600160a01b0381351690602001356103c5565b6101736004803603602081101561021b57600080fd5b50356001600160a01b03166103fb565b6100b6610416565b6101576004803603604081101561024957600080fd5b506001600160a01b038135169060200135610477565b6101576004803603604081101561027557600080fd5b506001600160a01b0381351690602001356104ad565b610173600480360360408110156102a157600080fd5b506001600160a01b03813581169160200135166104ba565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b820191906000526020600020905b81548152906001019060200180831161032857829003601f168201915b5050505050905090565b600061035c338484610546565b50600192915050565b60025490565b6000610378848484610632565b6001600160a01b0384166000908152600160209081526040808320338085529252909120546103b29186916103ad9086610768565b610546565b5060019392505050565b60055460ff1690565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103ad90866104e5565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103455780601f1061031a57610100808354040283529160200191610345565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161035c9185906103ad9086610768565b600061035c338484610632565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60008282018381101561053f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b03831661058b5760405162461bcd60e51b81526004018080602001828103825260248152602001806108306024913960400191505060405180910390fd5b6001600160a01b0382166105d05760405162461bcd60e51b81526004018080602001828103825260228152602001806107e96022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166106775760405162461bcd60e51b815260040180806020018281038252602581526020018061080b6025913960400191505060405180910390fd5b6001600160a01b0382166106bc5760405162461bcd60e51b81526004018080602001828103825260238152602001806107c66023913960400191505060405180910390fd5b6001600160a01b0383166000908152602081905260409020546106df9082610768565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461070e90826104e5565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156107bf576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a26469706673582212203d43c0001aa53fc1dcaf727855fac87a320625c8cd047f6c523c4f937f7a207964736f6c63430007040033",
    "sourceMap": "358:278:4:-:0;;;493:140;;;;;;;;;;442:193:1;;;;;;;;;;;;;-1:-1:-1;;;442:193:1;;;;;;;;;;;;;;;;-1:-1:-1;;;442:193:1;;;552:2:4;565:4:1;557:5;:12;;;;;;;;;;;;:::i;:::-;-1:-1:-1;580:16:1;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;607:9:1;:20;;-1:-1:-1;;607:20:1;;;;;;;;;;;;-1:-1:-1;567:58:4::1;::::0;-1:-1:-1;573:10:4::1;612;:8;:10::i;:::-;604:19;;600:2;:23;585:11;:39;567:5;;;:58;;:::i;:::-;358:278:::0;;1557:83:1;1623:9;;;;1557:83;:::o;6356:308:0:-;-1:-1:-1;;;;;6432:21:0;;6424:65;;;;;-1:-1:-1;;;6424:65:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;6517:24;6534:6;6517:12;;:16;;;;;;:24;;;;:::i;:::-;6502:12;:39;-1:-1:-1;;;;;6573:18:0;;:9;:18;;;;;;;;;;;;:30;;6596:6;;6573:22;;;;;:30;;:::i;:::-;-1:-1:-1;;;;;6552:18:0;;:9;:18;;;;;;;;;;;:51;;;;6619:37;;;;;;;6552:18;;:9;;6619:37;;;;;;;;;;6356:308;;:::o;859:181:3:-;917:7;949:5;;;973:6;;;;965:46;;;;;-1:-1:-1;;;965:46:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;1031:1;859:181;-1:-1:-1;;;859:181:3:o;358:278:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;358:278:4;;;-1:-1:-1;358:278:4;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
    "deployedSourceMap": "358:278:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;705:83:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:189:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2633:189:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1547:100;;;:::i;:::-;;;;;;;;;;;;;;;;3293:349;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3293:349:0;;;;;;;;;;;;;;;;;:::i;1557:83:1:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4051:279:0;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4051:279:0;;;;;;;;:::i;1710:119::-;;;;;;;;;;;;;;;;-1:-1:-1;1710:119:0;-1:-1:-1;;;;;1710:119:0;;:::i;907:87:1:-;;;:::i;4833:289:0:-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4833:289:0;;;;;;;;:::i;2042:197::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2042:197:0;;;;;;;;:::i;2302:184::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2302:184:0;;;;;;;;;;:::i;705:83:1:-;775:5;768:12;;;;;;;;-1:-1:-1;;768:12:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;742:13;;768:12;;775:5;;768:12;;775:5;768:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;705:83;:::o;2633:189:0:-;2734:4;2756:36;2765:10;2777:7;2786:5;2756:8;:36::i;:::-;-1:-1:-1;2810:4:0;2633:189;;;;:::o;1547:100::-;1627:12;;1547:100;:::o;3293:349::-;3425:4;3442:36;3452:6;3460:9;3471:6;3442:9;:36::i;:::-;-1:-1:-1;;;;;3558:19:0;;;;;;:11;:19;;;;;;;;3533:10;3558:31;;;;;;;;;3489:123;;3512:6;;3558:43;;3594:6;3558:35;:43::i;:::-;3489:8;:123::i;:::-;-1:-1:-1;3630:4:0;3293:349;;;;;:::o;1557:83:1:-;1623:9;;;;1557:83;:::o;4051:279:0:-;4194:10;4149:4;4241:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;4241:32:0;;;;;;;;;;4149:4;;4171:129;;4219:7;;4241:48;;4278:10;4241:36;:48::i;1710:119::-;-1:-1:-1;;;;;1803:18:0;1776:7;1803:18;;;;;;;;;;;;1710:119::o;907:87:1:-;979:7;972:14;;;;;;;;-1:-1:-1;;972:14:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;946:13;;972:14;;979:7;;972:14;;979:7;972:14;;;;;;;;;;;;;;;;;;;;;;;;4833:289:0;4981:10;4936:4;5028:23;;;:11;:23;;;;;;;;-1:-1:-1;;;;;5028:32:0;;;;;;;;;;4936:4;;4958:134;;5006:7;;5028:53;;5065:15;5028:36;:53::i;2042:197::-;2147:4;2169:40;2179:10;2191:9;2202:6;2169:9;:40::i;2302:184::-;-1:-1:-1;;;;;2451:18:0;;;2419:7;2451:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;2302:184::o;859:181:3:-;917:7;949:5;;;973:6;;;;965:46;;;;;-1:-1:-1;;;965:46:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;1031:1;859:181;-1:-1:-1;;;859:181:3:o;7742:369:0:-;-1:-1:-1;;;;;7869:19:0;;7861:68;;;;-1:-1:-1;;;7861:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7948:21:0;;7940:68;;;;-1:-1:-1;;;7940:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8021:18:0;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:35;;;8072:31;;;;;;;;;;;;;;;;;7742:369;;;:::o;5612:463::-;-1:-1:-1;;;;;5744:20:0;;5736:70;;;;-1:-1:-1;;;5736:70:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5825:23:0;;5817:71;;;;-1:-1:-1;;;5817:71:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5921:17:0;;:9;:17;;;;;;;;;;;:29;;5943:6;5921:21;:29::i;:::-;-1:-1:-1;;;;;5901:17:0;;;:9;:17;;;;;;;;;;;:49;;;;5984:20;;;;;;;:32;;6009:6;5984:24;:32::i;:::-;-1:-1:-1;;;;;5961:20:0;;;:9;:20;;;;;;;;;;;;:55;;;;6032:35;;;;;;;5961:20;;6032:35;;;;;;;;;;;;;5612:463;;;:::o;1315:184:3:-;1373:7;1406:1;1401;:6;;1393:49;;;;;-1:-1:-1;;;1393:49:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1465:5:3;;;1315:184::o",
    "sourcePath": "c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/Token.sol",
    "compiler": {
        "name": "solc",
        "version": "0.7.4+commit.3f05b770"
    },
    "ast": {
        "absolutePath": "c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/Token.sol",
        "exportedSymbols": {
            "ERC20": [
                424
            ],
            "ERC20Detailed": [
                487
            ],
            "IERC20": [
                565
            ],
            "SafeMath": [
                704
            ],
            "Token": [
                739
            ]
        },
        "id": 740,
        "nodeType": "SourceUnit",
        "nodes": [
            {
                "id": 706,
                "literals": [
                    "solidity",
                    "^",
                    "0.7",
                    ".4"
                ],
                "nodeType": "PragmaDirective",
                "src": "39:23:4"
            },
            {
                "absolutePath": "c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/ERC20.sol",
                "file": "./ERC20.sol",
                "id": 707,
                "nodeType": "ImportDirective",
                "scope": 740,
                "sourceUnit": 425,
                "src": "66:21:4",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "absolutePath": "c:/Users/hiran/OneDrive/Documentos/Projetos/TRC-20-Contract-Test/contracts/ERC20Detailed.sol",
                "file": "./ERC20Detailed.sol",
                "id": 708,
                "nodeType": "ImportDirective",
                "scope": 740,
                "sourceUnit": 488,
                "src": "89:29:4",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "abstract": false,
                "baseContracts": [
                    {
                        "baseName": {
                            "id": 710,
                            "name": "ERC20",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 424,
                            "src": "376:5:4",
                            "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20_$424",
                                "typeString": "contract ERC20"
                            }
                        },
                        "id": 711,
                        "nodeType": "InheritanceSpecifier",
                        "src": "376:5:4"
                    },
                    {
                        "baseName": {
                            "id": 712,
                            "name": "ERC20Detailed",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 487,
                            "src": "383:13:4",
                            "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ERC20Detailed_$487",
                                "typeString": "contract ERC20Detailed"
                            }
                        },
                        "id": 713,
                        "nodeType": "InheritanceSpecifier",
                        "src": "383:13:4"
                    }
                ],
                "contractDependencies": [
                    424,
                    487,
                    565
                ],
                "contractKind": "contract",
                "documentation": {
                    "id": 709,
                    "nodeType": "StructuredDocumentation",
                    "src": "122:234:4",
                    "text": " @title SimpleToken\n @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n Note they can later distribute these tokens as they wish using `transfer` and other\n `ERC20` functions."
                },
                "fullyImplemented": true,
                "id": 739,
                "linearizedBaseContracts": [
                    739,
                    487,
                    424,
                    565
                ],
                "name": "Token",
                "nodeType": "ContractDefinition",
                "nodes": [
                    {
                        "body": {
                            "id": 737,
                            "nodeType": "Block",
                            "src": "556:77:4",
                            "statements": [
                                {
                                    "expression": {
                                        "arguments": [
                                            {
                                                "expression": {
                                                    "id": 723,
                                                    "name": "msg",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": -15,
                                                    "src": "573:3:4",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_magic_message",
                                                        "typeString": "msg"
                                                    }
                                                },
                                                "id": 724,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "sender",
                                                "nodeType": "MemberAccess",
                                                "src": "573:10:4",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                }
                                            },
                                            {
                                                "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                },
                                                "id": 734,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                    "hexValue": "3130303030303030303030",
                                                    "id": 725,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": true,
                                                    "kind": "number",
                                                    "lValueRequested": false,
                                                    "nodeType": "Literal",
                                                    "src": "585:11:4",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_rational_10000000000_by_1",
                                                        "typeString": "int_const 10000000000"
                                                    },
                                                    "value": "10000000000"
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "*",
                                                "rightExpression": {
                                                    "components": [
                                                        {
                                                            "commonType": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            },
                                                            "id": 732,
                                                            "isConstant": false,
                                                            "isLValue": false,
                                                            "isPure": false,
                                                            "lValueRequested": false,
                                                            "leftExpression": {
                                                                "hexValue": "3130",
                                                                "id": 726,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": true,
                                                                "kind": "number",
                                                                "lValueRequested": false,
                                                                "nodeType": "Literal",
                                                                "src": "600:2:4",
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_rational_10_by_1",
                                                                    "typeString": "int_const 10"
                                                                },
                                                                "value": "10"
                                                            },
                                                            "nodeType": "BinaryOperation",
                                                            "operator": "**",
                                                            "rightExpression": {
                                                                "arguments": [
                                                                    {
                                                                        "arguments": [],
                                                                        "expression": {
                                                                            "argumentTypes": [],
                                                                            "id": 729,
                                                                            "name": "decimals",
                                                                            "nodeType": "Identifier",
                                                                            "overloadedDeclarations": [],
                                                                            "referencedDeclaration": 486,
                                                                            "src": "612:8:4",
                                                                            "typeDescriptions": {
                                                                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
                                                                                "typeString": "function () view returns (uint8)"
                                                                            }
                                                                        },
                                                                        "id": 730,
                                                                        "isConstant": false,
                                                                        "isLValue": false,
                                                                        "isPure": false,
                                                                        "kind": "functionCall",
                                                                        "lValueRequested": false,
                                                                        "names": [],
                                                                        "nodeType": "FunctionCall",
                                                                        "src": "612:10:4",
                                                                        "tryCall": false,
                                                                        "typeDescriptions": {
                                                                            "typeIdentifier": "t_uint8",
                                                                            "typeString": "uint8"
                                                                        }
                                                                    }
                                                                ],
                                                                "expression": {
                                                                    "argumentTypes": [
                                                                        {
                                                                            "typeIdentifier": "t_uint8",
                                                                            "typeString": "uint8"
                                                                        }
                                                                    ],
                                                                    "id": 728,
                                                                    "isConstant": false,
                                                                    "isLValue": false,
                                                                    "isPure": true,
                                                                    "lValueRequested": false,
                                                                    "nodeType": "ElementaryTypeNameExpression",
                                                                    "src": "604:7:4",
                                                                    "typeDescriptions": {
                                                                        "typeIdentifier": "t_type$_t_uint256_$",
                                                                        "typeString": "type(uint256)"
                                                                    },
                                                                    "typeName": {
                                                                        "id": 727,
                                                                        "name": "uint256",
                                                                        "nodeType": "ElementaryTypeName",
                                                                        "src": "604:7:4",
                                                                        "typeDescriptions": {}
                                                                    }
                                                                },
                                                                "id": 731,
                                                                "isConstant": false,
                                                                "isLValue": false,
                                                                "isPure": false,
                                                                "kind": "typeConversion",
                                                                "lValueRequested": false,
                                                                "names": [],
                                                                "nodeType": "FunctionCall",
                                                                "src": "604:19:4",
                                                                "tryCall": false,
                                                                "typeDescriptions": {
                                                                    "typeIdentifier": "t_uint256",
                                                                    "typeString": "uint256"
                                                                }
                                                            },
                                                            "src": "600:23:4",
                                                            "typeDescriptions": {
                                                                "typeIdentifier": "t_uint256",
                                                                "typeString": "uint256"
                                                            }
                                                        }
                                                    ],
                                                    "id": 733,
                                                    "isConstant": false,
                                                    "isInlineArray": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "nodeType": "TupleExpression",
                                                    "src": "599:25:4",
                                                    "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                    }
                                                },
                                                "src": "585:39:4",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                },
                                                {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                }
                                            ],
                                            "id": 722,
                                            "name": "_mint",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 303,
                                            "src": "567:5:4",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                                "typeString": "function (address,uint256)"
                                            }
                                        },
                                        "id": 735,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "567:58:4",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 736,
                                    "nodeType": "ExpressionStatement",
                                    "src": "567:58:4"
                                }
                            ]
                        },
                        "documentation": {
                            "id": 714,
                            "nodeType": "StructuredDocumentation",
                            "src": "404:83:4",
                            "text": " @dev Constructor that gives msg.sender all of existing tokens."
                        },
                        "id": 738,
                        "implemented": true,
                        "kind": "constructor",
                        "modifiers": [
                            {
                                "arguments": [
                                    {
                                        "hexValue": "596f7572546f6b656e4e616d65",
                                        "id": 717,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "528:15:4",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_d3222318623dd081000e7c48089cc89a9065bf93cc7029be80d5224d01790dd7",
                                            "typeString": "literal_string \"YourTokenName\""
                                        },
                                        "value": "YourTokenName"
                                    },
                                    {
                                        "hexValue": "59544e",
                                        "id": 718,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "545:5:4",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_ce4d3685a7317492178ca6e4a6035febf0c31a41768bdfa6b2c0022b9079b5f7",
                                            "typeString": "literal_string \"YTN\""
                                        },
                                        "value": "YTN"
                                    },
                                    {
                                        "hexValue": "3138",
                                        "id": 719,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "552:2:4",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_rational_18_by_1",
                                            "typeString": "int_const 18"
                                        },
                                        "value": "18"
                                    }
                                ],
                                "id": 720,
                                "modifierName": {
                                    "id": 716,
                                    "name": "ERC20Detailed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 487,
                                    "src": "514:13:4",
                                    "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$487_$",
                                        "typeString": "type(contract ERC20Detailed)"
                                    }
                                },
                                "nodeType": "ModifierInvocation",
                                "src": "514:41:4"
                            }
                        ],
                        "name": "",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 715,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "504:2:4"
                        },
                        "returnParameters": {
                            "id": 721,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "556:0:4"
                        },
                        "scope": 739,
                        "src": "493:140:4",
                        "stateMutability": "nonpayable",
                        "virtual": false,
                        "visibility": "public"
                    }
                ],
                "scope": 740,
                "src": "358:278:4"
            }
        ],
        "src": "39:599:4"
    },
    "functionHashes": {
        "allowance(address,address)": "dd62ed3e",
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "decimals()": "313ce567",
        "decreaseAllowance(address,uint256)": "a457c2d7",
        "increaseAllowance(address,uint256)": "39509351",
        "name()": "06fdde03",
        "symbol()": "95d89b41",
        "totalSupply()": "18160ddd",
        "transfer(address,uint256)": "a9059cbb",
        "transferFrom(address,address,uint256)": "23b872dd"
    },
    "gasEstimates": {
        "creation": {
            "codeDepositCost": "437000",
            "executionCost": "infinite",
            "totalCost": "infinite"
        },
        "external": {
            "allowance(address,address)": "1360",
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "1167",
            "decimals()": "1102",
            "decreaseAllowance(address,uint256)": "infinite",
            "increaseAllowance(address,uint256)": "infinite",
            "name()": "infinite",
            "symbol()": "infinite",
            "totalSupply()": "1043",
            "transfer(address,uint256)": "infinite",
            "transferFrom(address,address,uint256)": "infinite"
        }
    }
}